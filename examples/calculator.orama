// 简单计算器程序 - 递归实现

// 基本运算函数
let add = (a, b) => a + b
let subtract = (a, b) => a - b
let multiply = (a, b) => a * b
let divide = (a, b) => {
  if (b == 0) {
    println("错误：除数不能为零")
    return null
  }
  a / b
}

// 高级运算
let power = (a, n) => {
  if (n == 0) return 1
  if (n == 1) return a
  if (n < 0) return 1 / power(a, -n)
  
  let half = power(a, n / 2)
  if (n % 2 == 0) {
    return half * half
  } else {
    return a * half * half
  }
}

// 计算器函数
let calculate = (operation, a, b) => {
  if (operation == "+") return add(a, b)
  if (operation == "-") return subtract(a, b)
  if (operation == "*") return multiply(a, b)
  if (operation == "/") return divide(a, b)
  if (operation == "^") return power(a, b)
  
  println("不支持的操作: " + operation)
  return null
}

// 解析用户输入
let parseInput = (input) => {
  let parts = input.split(" ")
  if (parts.length != 3) {
    println("格式错误，请使用: 数字 运算符 数字")
    return null
  }
  
  let a = Number(parts[0])
  let op = parts[1]
  let b = Number(parts[2])
  
  if (isNaN(a) || isNaN(b)) {
    println("请输入有效的数字")
    return null
  }
  
  return { a, op, b }
}

// 递归实现的主循环
let calculatorLoop = () => {
  println("> ")
  let input = readLine()
  
  if (input == "exit") {
    println("感谢使用，再见！")
    return
  }
  
  let parsed = parseInput(input)
  if (parsed != null) {
    let { a, op, b } = parsed
    let result = calculate(op, a, b)
    if (result != null) {
      println(a + " " + op + " " + b + " = " + result)
    }
  }
  
  // 递归调用自身来实现循环
  calculatorLoop()
}

// 主程序
let main = () => {
  println("欢迎使用 Orama 计算器")
  println("支持的运算: + - * / ^")
  println("输入格式: 数字 运算符 数字 (例如: 5 + 3)")
  println("输入 'exit' 退出")
  
  calculatorLoop()
}

// 运行程序
main()